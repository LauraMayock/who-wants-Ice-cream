"""
Import gspread in order to update google spreadsheet
"""
import gspread
from google.oauth2.service_account import Credentials
from prettytable import PrettyTable
from datetime import datetime   # import for timestamp
import colorama  # import for font colour
from colorama import Fore
import time
import sys
import os

# initialize colorama
colorama.init(autoreset=True)

SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
    ]

CREDS = Credentials.from_service_account_file("CREDS.json")
SCOPED_CREDS = CREDS.with_scopes(SCOPE)
GSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)
SHEET = GSPREAD_CLIENT.open("Ice-creams")
flavours = SHEET.worksheet("flavours")
flav_list = flavours.col_values(1)[1:]

# Global Variables to hold order information
customer_order = []
new_choice = []
selected_flavour = []
price = []
noScoops = []

# date and time generated for the order receipt generated by order function
now = datetime.now()
date_stamp = now.strftime("%a:%d:%b:%y")
time_stamp = now.strftime("%H:%M")


def type_print(text):
    """
    code taken from www.101computing.net
    """
    for shop in text:
        sys.stdout.write(shop)
        sys.stdout.flush()
        time.sleep(0.05)


def input_req(text):
    """
    code taken from www.101computing.net
    """
    for shop in text:
        sys.stdout.write(shop)
        sys.stdout.flush()
        time.sleep(0.05)
    value = input()
    return value


def clearScreen():
    os.system("clear")

def buffer():
    time.sleep(.5)


def welcome():

    print("#██████╗██╗  ██╗███████╗   ██╗███╗   ██╗██████╗██╗██████╗ ██████╗")
    print("#╚═██╔═╝██║  ██║██╔════╝   ██║████╗  ██║██╔═══╝██║██╔══██╗██╔═══╝")
    print("#  ██║  ███████║█████╗     ██║██╔██╗ ██║██████╗██║██║  ██║█████╗")
    print("#  ██║  ██╔══██║██╔══╝     ██║██║╚██╗██║╚═══██║██║██║  ██║██╔══╝")
    print("#  ██║  ██║  ██║██████╗    ██║██║ ╚████║██████║██║██████╔╝██████╗")
    print("#  ╚═╝  ╚═╝  ╚═╝╚═════╝    ╚═╝╚═╝  ╚═══╝╚══════╝╚═╝╚═════╝ ╚════╝")
    print("#███████╗ ██████╗ ██████╗  ██████╗ ██████╗")
    print("#██╔════╝██╔════╝██╔═══██╗██╔═══██╗██╔══██╗")
    print("#███████╗██║     ██║   ██║██║   ██║██████╔╝")
    print("#╚════██║██║     ██║   ██║██║   ██║██╔═══╝")
    print("#███████║╚██████╗╚██████╔╝╚██████╔╝██║")
    print("#╚══════╝ ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝")
    start_order()


def start_order():
    """
    Function to welcome the customer and ask if
    they would like to order.
    """
    type_print("\nHi, Welcome to The Inside Scoop")
    type_print("\nWould you like to place an order?")
    question1 = input_req("\nPlease enter yes or no.\n")
    if question1.lower() == ("yes"):
        place_order()
    elif question1.lower() == ("no"):
        type_print("Ok, let me know when you have decided.\n")
        buffer()
        clearScreen()
        welcome()
    else:
        print(Fore.RED + "Sorry invalid entry.")
        print(Fore.RED + "Plese enter yes or no.")
        buffer()
        clearScreen()
        welcome()


def place_order():
    """
    Text goes here
    """
    choice = True
    while True:
        holder = input_req("What would you like a cup \
or a cone?\n").lower()
        if holder in ("cup", "cone"):
            number_scoops()
            break
        else:
            print(Fore.RED + "incorrect input....\n")
            place_order()


def number_scoops():
    """
    Text goes here.
    """
    global noScoops
    scoops = int(input_req("How many scoops? Enter 1, 2 or 3\n"))
    if scoops == 1:
        type_print("Ok, one scoop\n")
        customer_order.append("One scoop.")
        noScoops = 1
        buffer()
        flavour_choice()
    elif scoops == 2:
        type_print("Ok,two scoops it is.\n")
        customer_order.append("two scoops")
        noScoops = 2
        buffer()
        flavour_choice()
    elif scoops == 3:
        type_print("ok, Three scoops it is.\n")
        customer_order.append("Three scoops")
        noScoops = 3
        buffer()
        flavour_choice()
    else:
        print(Fore.RED + "Sorry invalid entry. Please pick a\
        corresponding number between 1-6")
        flav_choice()


def flavour_choice():
    """
    Text goes here.
    """
    flavour_list = []
    for type in flav_list:
        flavour_list.append(type)
    num = []
    for i in range(1, 7):
        num.append(i)


    flavour_choice.type = dict(zip(num, flavour_list))

    type_table = PrettyTable()
    type_table.field_names = num
    type_table.add_row(flavour_list)
    print(type_table)
    iceCreamFlavours()


def iceCreamFlavours():
    """
    Text goes here
    """
    global selected_flavour
    while True:
        try:
            flv = list(map(int, input_req("what flavour would you like?")))
            selected_flavour = [int(i)for i in flv]
            if len(flv) > noScoops:
                print(Fore.RED + f"You have chosen {flv}. Thats too many.\
                You wanted {noScoops} scoops.")
                continue
            if len(flv) < noScoops:
                print(Fore.RED + f"You havent chosen enough flavours.\
                You said you wanted {noScoops}")
                continue
            if len(flv) == noScoops:
                type_print(f"you have chosen {selected_flavour}")
                customer_order.append(selected_flavour)
                flav_choice()
                sprinkles()
                break
        except ValueError:
            print(Fore.RED + "Please type a number between 1-6")
        clearScreen()


def sprinkles():
    """
    Text goes here.
    """
    global price
    if noScoops == 3:
        type_print("\nThere is an offer on at the moment.\
Free sprinkles when you get 3 scoops\n")
        answer = input("yes/no\n")
        if answer.lower() == ("yes"):
            type_print("Added sprinkes\n")
            price = 4.00
            print_Order()
            customer_order.append("Free sprinkles")
        elif answer.lower() == ("no"):
            type_print("Ok, no sprinkes\n")
            price = 4.00
            print_Order()
        else:
            print(Fore.RED + "Sorry invalid entry.")
            input_req("Plese enter yes or no.")
    if noScoops < 3:
        question3 = input_req("\nWould you like sprinkles with that?\
It will be and extra 50c\n yes/no")
        if question3.lower() == ("yes"):
            type_print("Added sprinkles\n")
            if noScoops == 1:
                price = 2.5
                print_Order()
            if noScoops == 2:
                price = 3.50
                print_Order()
        elif question3.lower() == ("no"):
            if noScoops == 1:
                price = 2.00
                print_Order()
            if noScoops == 2:
                price = 3.00
                print_Order()
        else:
            print(Fore.RED + "Plese enter yes or no.")

def flav_choice():
    """
    Infor here
    """
    global new_choice
    new_choice = []
    for x in selected_flavour:
        new_choice.append(flav_list[x - 1])


def print_Order():
    """
    Print order
    """
    order_table = PrettyTable()
    order_table.field_names = (["Order"])
    order_table.add_row([f'Date: {date_stamp}'])
    order_table.add_row([f'Time: {time_stamp}'])
    order_table.add_row([f"Order: {customer_order + [new_choice]}"])
    order_table.add_row([f"Total: €{price}"])
    print(order_table)


welcome()
flav_choice()
#print_Order()
